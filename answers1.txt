## Place your answers here.
Exercise 2:
  exploit-2a.py
    对reqpath[2048]进行overflow，构造url中的PATH为"/+++++++..."长度为2073，恰好覆盖完return address。
  exploit-2b.py 
    对pn[1024]进行overflow，构造url中的PATH为"/+++.."长度为1025，覆盖掉ebp，并且保留buffer中函数指针的值，以免函数在返回前crash而不能体现buffer overflow的效果。

Exercise 3:
    所有在Exercise 1中找到的bug,原则上都可以应用于此类对executeable stack的code injection攻击，只是难易程度不同。经过测试，利用url 中的path进行攻击比较简单，利用http header攻击需要精细地考虑url格式，使得能成功注入。

Exercise 4:
    所有在Exercise 1中找到的bug,原则上都可以应用于此类对non-executeable stack的return to libc 攻击.攻击时最好选择参数较少的system call,尽量直接调用，通过构造栈来传递参数等。

Exercise 5:

1. 对于用户的隔离做得不是太充分，当zookfs被crash时，zookd不会crash，也不会察觉zookfs被攻击，系统已经不安全,还会继续服务其他user，这样attacker攻击zookfs成功后，取得了控制权，其他user在正常使用服务或者发出服务器请求时，会被attacker截获，有泄漏该user隐私和安全的可能。

修复方法：增加对zookd以及zookfs的代码完整性检查，以及在运行过程中采取监控异常的守护进程，使得任何一个侧面被攻击时能够被及时发现，并通知管理员。


2. zookfs进程在处理reqpath时没有采取相应的检查隔离措施，使得user可以利用reqpath访问该系统的所有文件目录得到该主机的目录信息。原因是zookfs只是简单的将reqpath交由系统的处理，没有使该reqpath仅仅局限于/home/httpd下。

修复方法：可以简单的对reqpath进行检查，防止注入../等符号，或者直接修改zookfs的权限，使其只能访问特定的目录下的文件，而不能访问机器上其他目录等。

3. zookld也是不太安全的，恶意的用户可以通过先修改conf文件来使得攻击变得更加容易。

修复方法：提供对于conf的参数安全检查方法，zookld加载的是比较安全可靠的zook服务运行组件。

4. 由于网络攻击是匿名且没有被追踪的，所以攻击者付出的代价很小。

修复方法：引入验证以及日志系统，通过对user的记录和认证使得服务器更有knowledge知道自己正在被attack。

Exercise 6:

	bug 1 : 
		- char reqpath[2048];
		+ static reqpath[2048];
	bug2 :
		- char value[512];
		+ static char value[512];
	bug3 :
		- char envvar[512];
		+ static char envvar[512];
	bug4 : 
		- char pn[1024];
		+ static char pn[1024];
	bug5 :
		- char name[1024];
		+ static char name[1024];


